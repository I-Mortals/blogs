export const data = JSON.parse("{\"key\":\"v-7250a9e6\",\"path\":\"/pages/e97bc1e5626b082c/\",\"title\":\"装饰器\",\"lang\":\"en-US\",\"frontmatter\":{\"title\":\"装饰器\",\"date\":\"2020-02-09T16:00:30.000Z\",\"permalink\":\"/pages/e97bc1e5626b082c\",\"author\":\"阮一峰\",\"categories\":[\"《ES6 教程》笔记\"],\"tags\":[\"ES6\"]},\"excerpt\":\"<h1 id=\\\"装饰器\\\" tabindex=\\\"-1\\\"><a class=\\\"header-anchor\\\" href=\\\"#装饰器\\\" aria-hidden=\\\"true\\\">#</a> 装饰器</h1>\\n<p>[说明] Decorator 提案经过了大幅修改，目前还没有定案，不知道语法会不会再变。下面的内容完全依据以前的提案，已经有点过时了。等待定案以后，需要完全重写。</p>\\n<p>装饰器（Decorator）是一种与类（class）相关的语法，用来注释或修改类和类方法。许多面向对象的语言都有这项功能，目前有一个<a href=\\\"https://github.com/tc39/proposal-decorators\\\" target=\\\"_blank\\\" rel=\\\"noopener noreferrer\\\">提案</a>将其引入了 ECMAScript。</p>\\n\",\"headers\":[{\"level\":2,\"title\":\"类的装饰\",\"slug\":\"类的装饰\",\"children\":[]},{\"level\":2,\"title\":\"方法的装饰\",\"slug\":\"方法的装饰\",\"children\":[]},{\"level\":2,\"title\":\"为什么装饰器不能用于函数？\",\"slug\":\"为什么装饰器不能用于函数\",\"children\":[]},{\"level\":2,\"title\":\"core-decorators.js\",\"slug\":\"core-decorators-js\",\"children\":[]},{\"level\":2,\"title\":\"使用装饰器实现自动发布事件\",\"slug\":\"使用装饰器实现自动发布事件\",\"children\":[]},{\"level\":2,\"title\":\"Mixin\",\"slug\":\"mixin\",\"children\":[]},{\"level\":2,\"title\":\"Trait\",\"slug\":\"trait\",\"children\":[]}]}")
