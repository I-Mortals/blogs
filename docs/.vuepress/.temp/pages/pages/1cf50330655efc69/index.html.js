export const data = JSON.parse("{\"key\":\"v-24af6b0a\",\"path\":\"/pages/1cf50330655efc69/\",\"title\":\"函数式编程\",\"lang\":\"en-US\",\"frontmatter\":{\"title\":\"函数式编程\",\"date\":\"2020-02-09T16:00:30.000Z\",\"permalink\":\"/pages/1cf50330655efc69\",\"author\":\"阮一峰\",\"categories\":[\"《ES6 教程》笔记\"],\"tags\":[\"ES6\"]},\"excerpt\":\"<h1 id=\\\"函数式编程\\\" tabindex=\\\"-1\\\"><a class=\\\"header-anchor\\\" href=\\\"#函数式编程\\\" aria-hidden=\\\"true\\\">#</a> 函数式编程</h1>\\n<p>JavaScript 语言从一诞生，就具有函数式编程的烙印。它将函数作为一种独立的数据类型，与其他数据类型处于完全平等的地位。在 JavaScript 语言中，你可以采用面向对象编程，也可以采用函数式编程。有人甚至说，JavaScript 是有史以来第一种被大规模采用的函数式编程语言。</p>\\n\",\"headers\":[{\"level\":2,\"title\":\"柯里化\",\"slug\":\"柯里化\",\"children\":[]},{\"level\":2,\"title\":\"函数合成\",\"slug\":\"函数合成\",\"children\":[]},{\"level\":2,\"title\":\"参数倒置\",\"slug\":\"参数倒置\",\"children\":[]},{\"level\":2,\"title\":\"执行边界\",\"slug\":\"执行边界\",\"children\":[]},{\"level\":2,\"title\":\"队列操作\",\"slug\":\"队列操作\",\"children\":[]},{\"level\":2,\"title\":\"合并操作\",\"slug\":\"合并操作\",\"children\":[]},{\"level\":2,\"title\":\"配对操作\",\"slug\":\"配对操作\",\"children\":[]},{\"level\":2,\"title\":\"参考链接\",\"slug\":\"参考链接\",\"children\":[]}]}")
