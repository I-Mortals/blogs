export const data = JSON.parse("{\"key\":\"v-0213d7d6\",\"path\":\"/pages/74de3e45e4491e95/\",\"title\":\"Reflect\",\"lang\":\"en-US\",\"frontmatter\":{\"title\":\"Reflect\",\"date\":\"2020-02-09T16:00:29.000Z\",\"permalink\":\"/pages/74de3e45e4491e95\",\"author\":\"阮一峰\",\"categories\":[\"《ES6 教程》笔记\"],\"tags\":[\"ES6\"]},\"excerpt\":\"<h1 id=\\\"reflect\\\" tabindex=\\\"-1\\\"><a class=\\\"header-anchor\\\" href=\\\"#reflect\\\" aria-hidden=\\\"true\\\">#</a> Reflect</h1>\\n<h2 id=\\\"概述\\\" tabindex=\\\"-1\\\"><a class=\\\"header-anchor\\\" href=\\\"#概述\\\" aria-hidden=\\\"true\\\">#</a> 概述</h2>\\n<p><code v-pre>Reflect</code>对象与<code v-pre>Proxy</code>对象一样，也是 ES6 为了操作对象而提供的新 API。<code v-pre>Reflect</code>对象的设计目的有这样几个。</p>\\n<p>（1） **将<code v-pre>Object</code>对象的一些明显属于语言内部的方法（比如<code v-pre>Object.defineProperty</code>），放到<code v-pre>Reflect</code>对象上。**现阶段，某些方法同时在<code v-pre>Object</code>和<code v-pre>Reflect</code>对象上部署，未来的新方法将只部署在<code v-pre>Reflect</code>对象上。也就是说，从<code v-pre>Reflect</code>对象上可以拿到语言内部的方法。</p>\\n\",\"headers\":[{\"level\":2,\"title\":\"概述\",\"slug\":\"概述\",\"children\":[]},{\"level\":2,\"title\":\"静态方法\",\"slug\":\"静态方法\",\"children\":[{\"level\":3,\"title\":\"Reflect.get(target, name, receiver)\",\"slug\":\"reflect-get-target-name-receiver\",\"children\":[]},{\"level\":3,\"title\":\"Reflect.set(target, name, value, receiver)\",\"slug\":\"reflect-set-target-name-value-receiver\",\"children\":[]},{\"level\":3,\"title\":\"Reflect.has(obj, name)\",\"slug\":\"reflect-has-obj-name\",\"children\":[]},{\"level\":3,\"title\":\"Reflect.deleteProperty(obj, name)\",\"slug\":\"reflect-deleteproperty-obj-name\",\"children\":[]},{\"level\":3,\"title\":\"Reflect.construct(target, args)\",\"slug\":\"reflect-construct-target-args\",\"children\":[]},{\"level\":3,\"title\":\"Reflect.getPrototypeOf(obj)\",\"slug\":\"reflect-getprototypeof-obj\",\"children\":[]},{\"level\":3,\"title\":\"Reflect.setPrototypeOf(obj, newProto)\",\"slug\":\"reflect-setprototypeof-obj-newproto\",\"children\":[]},{\"level\":3,\"title\":\"Reflect.apply(func, thisArg, args)\",\"slug\":\"reflect-apply-func-thisarg-args\",\"children\":[]},{\"level\":3,\"title\":\"Reflect.defineProperty(target, propertyKey, attributes)\",\"slug\":\"reflect-defineproperty-target-propertykey-attributes\",\"children\":[]},{\"level\":3,\"title\":\"Reflect.getOwnPropertyDescriptor(target, propertyKey)\",\"slug\":\"reflect-getownpropertydescriptor-target-propertykey\",\"children\":[]},{\"level\":3,\"title\":\"Reflect.isExtensible (target)\",\"slug\":\"reflect-isextensible-target\",\"children\":[]},{\"level\":3,\"title\":\"Reflect.preventExtensions(target)\",\"slug\":\"reflect-preventextensions-target\",\"children\":[]},{\"level\":3,\"title\":\"Reflect.ownKeys (target)\",\"slug\":\"reflect-ownkeys-target\",\"children\":[]}]},{\"level\":2,\"title\":\"实例：使用 Proxy 实现观察者模式\",\"slug\":\"实例-使用-proxy-实现观察者模式\",\"children\":[]}]}")
